var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.arrayIteratorImpl=function(a){var b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}};$jscomp.arrayIterator=function(a){return{next:$jscomp.arrayIteratorImpl(a)}};$jscomp.makeIterator=function(a){var b="undefined"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):$jscomp.arrayIterator(a)};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.SIMPLE_FROUND_POLYFILL=!1;
$jscomp.objectCreate=$jscomp.ASSUME_ES5||"function"==typeof Object.create?Object.create:function(a){var b=function(){};b.prototype=a;return new b};$jscomp.underscoreProtoCanBeSet=function(){var a={a:!0},b={};try{return b.__proto__=a,b.a}catch(c){}return!1};$jscomp.setPrototypeOf="function"==typeof Object.setPrototypeOf?Object.setPrototypeOf:$jscomp.underscoreProtoCanBeSet()?function(a,b){a.__proto__=b;if(a.__proto__!==b)throw new TypeError(a+" is not extensible");return a}:null;
$jscomp.inherits=function(a,b){a.prototype=$jscomp.objectCreate(b.prototype);a.prototype.constructor=a;if($jscomp.setPrototypeOf){var c=$jscomp.setPrototypeOf;c(a,b)}else for(c in b)if("prototype"!=c)if(Object.defineProperties){var d=Object.getOwnPropertyDescriptor(b,c);d&&Object.defineProperty(a,c,d)}else a[c]=b[c];a.superClass_=b.prototype};var PubmedExtractor=function(a,b,c){return Extractor.call(this,a,b,c)||this};$jscomp.inherits(PubmedExtractor,Extractor);
PubmedExtractor.prototype.extract=function(a){a=[];for(var b=window.location.hostname,c=$jscomp.makeIterator(this.blocks),d=c.next();!d.done;d=c.next()){d=d.value;var e={ids:[{id:d.querySelector("dd").innerText,src:"pubmed"}]};e.title=this.getTitle(d,".title");e.authors=this.getAuthors(d,".desc");e.textUrl=b+"/pubmed/"+e.ids[0].id;e.year=this.getYear(d,".details");e.doi=this.getDoi(d,".details");a.push(e)}return a};
PubmedExtractor.prototype.getAuthors=function(a,b){var c=a.querySelector(b),d=[];if(!c&&this.verbose)console.log("EXTRACTOR ("+this.name+"): authors aren't extracted");else if(this.verbose){console.log("EXTRACTOR ("+this.name+"): authors extracted");c=c.innerText.slice(0,-1).split(", ");c=$jscomp.makeIterator(c);for(var e=c.next();!e.done;e=c.next())d.push({fullName:e.value,ids:[]});console.log(d)}return d};
PubmedExtractor.prototype.getYear=function(a,b){var c=a.querySelector(b),d=2E3;!c&&this.verbose?console.log("EXTRACTOR ("+this.name+"): year isn't extracted"):this.verbose&&((c=c.innerText.match(/\. (\d{4})/))&&(d=parseInt(c[1])),console.log("EXTRACTOR ("+this.name+"): extracted year = "+d));return d};
PubmedExtractor.prototype.getSimilarArticlesRefs=function(a,b){var c=a.querySelector(b),d={};!c&&this.verbose?console.log("EXTRACTOR ("+this.name+"): similar refs aren't extracted"):this.verbose&&(console.log("EXTRACTOR ("+this.name+"): similar refs extracted"),d.link=c.getAttribute("href"),d.amount=0,d.ids=[]);return d};
PubmedExtractor.prototype.getDoi=function(a,b){var c=a.querySelector(b),d="";!c&&this.verbose?console.log("EXTRACTOR ("+this.name+"): doi isn't extracted"):this.verbose&&((c=c.innerText.match(/doi: (\d.*)\. /))&&(d=c[1]),console.log("EXTRACTOR ("+this.name+"): extracted doi = "+d));return d};PubmedExtractor.prototype.getTextLink=function(a){a=document.querySelector(void 0===a?".icons.portlet > a":a);var b="";a&&(b=a.getAttribute("href"));return b};
PubmedExtractor.prototype.extractArticleFromPage=function(a){a=void 0===a?"div.rprt.abstract":a;var b={ids:[{id:window.location.href.split("/").slice(-1)[0],src:"pubmed"}]};a=document.querySelector(a);this.blocks=[a];b.title=this.getTitle(a,"h1");b.year=this.getYear(a,"div.cit");b.textUrl=this.getTextLink(".icons.portlet > a");b.abstractText=this.getAbstract(a,"div.abstr").replace("Abstract","").trim();b.doi=this.getDoi(a,"div.cit");a=this.getAuthors(a,"div.auths");b.authors=[];a=$jscomp.makeIterator(a);
for(var c=a.next();!c.done;c=a.next())b.authors.push({fullName:c.value.fullName.slice(0,-1),ids:[]});return[b]};
